/**
*Program Name:	cis25Fall2015PeterWolzRombergerLab7Ex1.cpp
*Discussion:	Shapes
*Writen by:		Peter Wolz-Romberger
*Date:			2015/12/15
*/

#include <iostream>
using namespace std;
#include "FRACTION.H"
#include "UTILITIES.H"
#include "POINT.H"
#include "SHAPE.h"
#include "RECTANGLE.h"
#include "CIRCLE.h"
#include "CYLINDER.h"
#include "BOX.h"

void mainMenu(void);
void shapeMenu(void);

int main() {
	/*
	RectanglePeterW test1;
	RectanglePeterW test2;
	RectanglePeterW test3;

	test1 = RectanglePeterW(PointPeterW(FractionPeterW(0, 1), FractionPeterW(0, 1)), PointPeterW(FractionPeterW(1, 1), FractionPeterW(1, 1)));
	test2 = RectanglePeterW(PointPeterW(FractionPeterW(1, 1), FractionPeterW(1, 1)), PointPeterW(FractionPeterW(2, 1), FractionPeterW(2, 1)));
	test3 = test1 + test2;
	cout << "\n\n\n\n\n\n" << test3 << "\n\n\n\n\n\n\n";
	*/
	/*
	CylinderPeterW test;
	test = CylinderPeterW(CirclePeterW(PointPeterW(FractionPeterW(1, 1), FractionPeterW(1, 1)), FractionPeterW(2, 2)), FractionPeterW(4, 1));
	cout << test;
	*/

	
	//displayClassInfoPeterWolzRomberger();
	shapeMenu();

}

void mainMenu() {

	int menuChoice;
	RectanglePeterW *rec1 = nullptr;
	RectanglePeterW *rec2 = nullptr;
	CirclePeterW *cir1 = nullptr;
	CirclePeterW *cir2 = nullptr;
	int initalizeCheck = 0;

	do {
		cout << "\n*************************************\n"
			<< "*              MAIN MENU            *\n"
			<< "*(1) Rectangle Tasks                *\n"
			<< "*(2) Circle Tasks                   *\n"
			<< "*(3) Mixed Rectangle & Circle Tasks *\n"
			<< "*(4) Quit                           *\n"
			<< "*************************************\n";

		cout << "Select an option (use integer value only): ";
		cin >> menuChoice;
		cout << endl;

		switch (menuChoice) {
		case 1: cout << "  Rectangle Tasks --\n";
			if (initalizeCheck == 0 || initalizeCheck == 10) {
				initalizeCheck += rectangleMenu(&rec1, &rec2);
			}
			else {
				rectangleMenu(&rec1, &rec2);
			}
			break;
		case 2: cout << "  Circle Tasks --\n";
			if (initalizeCheck == 0 || initalizeCheck == 1) {
				initalizeCheck += circleMenu(&cir1, &cir2);
			}
			else {
				circleMenu(&cir1, &cir2);
			}
			break;
		case 3: cout << "  Mixed Rectangle & Circle Tasks --\n";
			if (initalizeCheck == 11) {
				mixedMenu(rec1, rec2, cir1, cir2);
			}
			else {
				cout << "\n    Not a proper call as no Points are available!\n";
			}
			break;
		case 4:  cout << "  Having Fun ...\n";
			break;
		default:
			cout << "WRONG OPTION!\n";
			break;
		}

	} while (menuChoice != 4);

}

void shapeMenu() {

	int menuChoice;
	int sizeOfArray;
	int initalizeCheck = 0;
	RectanglePeterW *tempRec;
	CirclePeterW *tempCir;
	CylinderPeterW *tempCyl;
	BoxPeterW *tempBox;
	FractionPeterW data1;
	FractionPeterW data2;
	int subMenuChoice1;
	int subMenuChoice2;
	RectanglePeterW rec1;
	RectanglePeterW rec2;
	CirclePeterW cir1;
	CirclePeterW cir2;
	BoxPeterW box1;
	BoxPeterW box2;
	CylinderPeterW cyl1;
	CylinderPeterW cyl2;
	
	do {
		cout << "\n*******************************************\n"
			<< "*              MAIN MENU                  *\n"
			<< "*(1) Create 2 RectanglePeterW objects     *\n"
			<< "*(2) Create 2 CirclePeterW objects        *\n"
			<< "*(3) Create 2 BoxPeterW objects           *\n"
			<< "*(4) Create 2 CylinderPeterW objects      *\n"
			<< "*(5) Compare 2 selected objects by area   *\n"
			<< "*(6) Compare 2 selected objects by volume *\n"
			<< "*(7) Print selected objects               *\n"
			<< "*(8) Quit                                 *\n"
			<< "*******************************************\n";

		cout << "Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): ";
		cin >> menuChoice;
		cout << endl;

		switch (menuChoice) {
		case 1: cout << "  Create 2 Rectangle objects --\n";
			initialize(&tempRec);
			rec1 = RectanglePeterW(*tempRec);
			initialize(&tempRec);
			rec2 = RectanglePeterW(*tempRec);
			if (initalizeCheck % 10 != 1) {
				initalizeCheck += 1;
			}
			break;
		case 2: cout << "  Create 2 Circle objects --\n";
			initialize(&tempCir);
			cir1 = CirclePeterW(*tempCir);
			initialize(&tempCir);
			cir2 = CirclePeterW(*tempCir);
			if ((initalizeCheck / 10) % 10 != 1) {
				initalizeCheck += 10;
			}
			break;
		case 3: cout << "  Create 2 Box objects --\n";
			
			initialize(&tempBox);
			box1 = BoxPeterW(*tempBox);
			initialize(&tempBox);
			box2 = BoxPeterW(*tempBox);
			if ((initalizeCheck / 100) % 10 != 1) {
				initalizeCheck += 100;
			}
			break;
		case 4:cout << "  Create 2 Cylinder objects --\n";
			initialize(&tempCyl);
			cyl1 = CylinderPeterW(*tempCyl);
			initialize(&tempCyl);
			cyl2 = CylinderPeterW(*tempCyl);
			if ((initalizeCheck / 1000) % 10 != 1){
				initalizeCheck += 1000;
			}
			break;
		case 5:
			if (initalizeCheck == 1111) {
				cout << "  Please enter Object #1 : ";
				cin >> subMenuChoice1;
				subMenuChoice2 = 0;
				do {
					if (subMenuChoice1 == subMenuChoice2) {
						cout << "\n Please enter a unique second choice!\n";
					}
					cout << "  Please enter Object #2 : ";
					cin >> subMenuChoice2;
				} while (subMenuChoice1 == subMenuChoice2);
				switch (subMenuChoice1) {
				case 1: data1 = rec1.getArea();
					break;
				case 2: data1 = rec2.getArea();
					break;
				case 3: data1 = cir1.getArea();
					break;
				case 4: data1 = cir2.getArea();
					break;
				case 5: data1 = cyl1.getArea();
					break;
				case 6: data1 = cyl2.getArea();
					break;
				case 7: data1 = box1.getArea();
					break;
				case 8: data1 = box2.getArea();
					break;
				}
				switch (subMenuChoice2) {
				case 1: data2 = rec1.getArea();
					break;
				case 2: data2 = rec2.getArea();
					break;
				case 3: data2 = cir1.getArea();
					break;
				case 4: data2 = cir2.getArea();
					break;
				case 5: data2 = cyl1.getArea();
					break;
				case 6: data2 = cyl2.getArea();
					break;
				case 7: data2 = box1.getArea();
					break;
				case 8: data2 = box2.getArea();
					break;
				}
				if (data1 > data2) {
					cout << "\n      The first Shape has a greater area of " << data1
						<< "\n      than The seconds Shape's area of " << data2 << endl;
				} else if (data1 == data2) {
					cout << "\n      Both Rectangles have an area of " << data1;
				} else {
					cout << "\n      The seconds Shape has a greater area of " << data2
						<< "\n      than The first Shape's area of " << data1 << endl;
				}
			} else {
				cout << "\n  Please make sure all shapes are set before comparing\n";
			}
			break;
		case 6:
			if (initalizeCheck == 1111) {
				cout << "  Please enter Object #1 : ";
				cin >> subMenuChoice1;
				subMenuChoice2 = 0;
				do {
					if (subMenuChoice1 == subMenuChoice2) {
						cout << "\n Please enter a unique second choice!\n";
					}
					cout << "  Please enter Object #2 : ";
					cin >> subMenuChoice2;
				} while (subMenuChoice1 == subMenuChoice2);
				switch (subMenuChoice1) {
				case 1: data1 = rec1.getVolume();
					break;
				case 2: data1 = rec2.getVolume();
					break;
				case 3: data1 = cir1.getVolume();
					break;
				case 4: data1 = cir2.getVolume();
					break;
				case 5: data1 = cyl1.getVolume();
					break;
				case 6: data1 = cyl2.getVolume();
					break;
				case 7: data1 = box1.getVolume();
					break;
				case 8: data1 = box2.getVolume();
					break;
				}
				switch (subMenuChoice2) {
				case 1: data2 = rec1.getVolume();
					break;
				case 2: data2 = rec2.getVolume();
					break;
				case 3: data2 = cir1.getVolume();
					break;
				case 4: data2 = cir2.getVolume();
					break;
				case 5: data2 = cyl1.getVolume();
					break;
				case 6: data2 = cyl2.getVolume();
					break;
				case 7: data2 = box1.getVolume();
					break;
				case 8: data2 = box2.getVolume();
					break;
				}
				if (data1 > data2) {
					cout << "\n      The first Shape has a greater area of " << data1
						<< "\n      than The seconds Shape's area of " << data2 << endl;
				} else if (data1 == data2) {
					cout << "\n      Both Rectangles have an area of " << data1;
				} else {
					cout << "\n      The seconds Shape has a greater area of " << data2
						<< "\n      than The first Shape's area of " << data1 << endl;
				}
			} else {
				cout << "\n  Please make sure all shapes are set before comparing\n";
			}
			break;
		case 7:  
			if (initalizeCheck == 1111) {
				rec1.print();
				rec2.print();
				cir1.print();
				cir2.print();
				cyl1.print();
				cyl2.print();
				box1.print();
				box2.print();
			} else {
				cout << "\n  Please make sure all shapes are set before printing\n";
			}
			break;
		case 8:  cout << "  Having Fun ...\n";
			break;
		default:
			cout << "WRONG OPTION!\n";
			break;
		}
	} while (menuChoice != 8);
}

/* PROGRAM OUTPUT
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Box()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Box()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Cylinder()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Cylinder()

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 1

  Create 2 Rectangle objects --
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
    Please enter the fraction values for Point #1
      X Value, Numerator   : 0
      X Value, Denominator : 1
      Y Value, Numerator   : 0
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for Point #2
      X Value, Numerator   : 3
      X Value, Denominator : 2
      Y Value, Numerator   : 3
      Y Value, Denominator : 2

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
    Please enter the fraction values for Point #1
      X Value, Numerator   : -1
      X Value, Denominator : 2
      Y Value, Numerator   : -2
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for Point #2
      X Value, Numerator   : 5
      X Value, Denominator : 2
      Y Value, Numerator   : 4
      Y Value, Denominator : 3

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 2

  Create 2 Circle objects --
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
    Please enter the fraction values for Point #1
      X Value, Numerator   : 0
      X Value, Denominator : 1
      Y Value, Numerator   : 0
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for the Radius
      Radius, Numerator   : 8
      Radius, Denominator : 3
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
    Please enter the fraction values for Point #1
      X Value, Numerator   : 0
      X Value, Denominator : 1
      Y Value, Numerator   : 0
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for the Radius
      Radius, Numerator   : 5
      Radius, Denominator : 9
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 3

  Create 2 Box objects --
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
    Please enter the fraction values for Point #1
      X Value, Numerator   : 0
      X Value, Denominator : 1
      Y Value, Numerator   : 0
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for Point #2
      X Value, Numerator   : 5
      X Value, Denominator : 2
      Y Value, Numerator   : 6
      Y Value, Denominator : 5

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the Height Numerator : 9
    Please enter the Height Denominator : 2
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Box()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Box()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Box()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
    Please enter the fraction values for Point #1
      X Value, Numerator   : -5
      X Value, Denominator : 2
      Y Value, Numerator   : -3
      Y Value, Denominator : 5

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for Point #2
      X Value, Numerator   : 2
      X Value, Denominator : 7
      Y Value, Numerator   : 1
      Y Value, Denominator : 9

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the Height Numerator : 5
    Please enter the Height Denominator : 3
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Box()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Rectangle()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Box()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Box()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 4

  Create 2 Cylinder objects --
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
    Please enter the fraction values for Center Point
      X Value, Numerator   : 8
      X Value, Denominator : 3
      Y Value, Numerator   : 4
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for the Radius
      Radius, Numerator   : 11
      Radius, Denominator : 3
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the Height Numerator : 5
    Please enter the Height Denominator : 3
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Cylinder()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Cylinder()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Cylinder()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
    Please enter the fraction values for Center Point
      X Value, Numerator   : 0
      X Value, Denominator : 1
      Y Value, Numerator   : 0
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for the Radius
      Radius, Numerator   : 7
      Radius, Denominator : 17
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the Height Numerator : 5
    Please enter the Height Denominator : 2
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Cylinder()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Cylinder()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Cylinder()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 2

  Create 2 Circle objects --
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
    Please enter the fraction values for Point #1
      X Value, Numerator   : 5
      X Value, Denominator : 2
      Y Value, Numerator   : 3
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for the Radius
      Radius, Numerator   : 8
      Radius, Denominator : 3
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
    Please enter the fraction values for Point #1
      X Value, Numerator   : 0
      X Value, Denominator : 1
      Y Value, Numerator   : 0
      Y Value, Denominator : 1

calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
    Please enter the fraction values for the Radius
      Radius, Numerator   : 9
      Radius, Denominator : 5
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Point()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Circle()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 5

  Please enter Object #1 : 3
  Please enter Object #2 : 5
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()

      The seconds Shape has a greater area of 18392 / 135
      than The first Shape's area of 5024 / 225

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 6

  Please enter Object #1 : 7
  Please enter Object #2 : 6
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()

      The first Shape has a greater area of 27 / 2
      than The seconds Shape's area of 735 / 578

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 7

Rectangle bounded by Point: (0 / 1, 0 / 1) and Point: (3 / 2, 3 / 2)Rectangle bo
unded by Point: (-1 / 2, -2 / 1) and Point: (5 / 2, 4 / 3)calling Fraction()

        Circle has a center of Point: (5 / 2, 3 / 1) and a radius of 8 / 3
        and a area of:5024 / 225calling ~Fraction()
calling Fraction()

        Circle has a center of Point: (0 / 1, 0 / 1) and a radius of 9 / 5
        and a area of:12717 / 1250calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()

        Cylinder has a base of calling Fraction()

        Circle has a center of Point: (8 / 3, 4 / 1) and a radius of 11 / 3
        and a area of:18997 / 450calling ~Fraction()

        and a height of 5 / 3
        and a area of:18392 / 135
        and a volume of:605 / 9calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()

        Cylinder has a base of calling Fraction()

        Circle has a center of Point: (0 / 1, 0 / 1) and a radius of 7 / 17
        and a area of:7693 / 14450calling ~Fraction()

        and a height of 5 / 2
        and a area of:3724 / 1445
        and a volume of:735 / 578calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()

        Box has a base of Rectangle bounded by Point: (0 / 1, 0 / 1) and Point:
(5 / 2, 6 / 5)
        and a height of 9 / 2
        and a area of:393 / 10
        and a volume of:27 / 2calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling Fraction()
calling Fraction()
calling Fraction()
calling Fraction()

        Box has a base of Rectangle bounded by Point: (-5 / 2, -3 / 5) and Point
: (2 / 7, 1 / 9)
        and a height of 5 / 3
        and a area of:14759 / 945
        and a volume of:208 / 63calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()

*******************************************
*              MAIN MENU                  *
*(1) Create 2 RectanglePeterW objects     *
*(2) Create 2 CirclePeterW objects        *
*(3) Create 2 BoxPeterW objects           *
*(4) Create 2 CylinderPeterW objects      *
*(5) Compare 2 selected objects by area   *
*(6) Compare 2 selected objects by volume *
*(7) Print selected objects               *
*(8) Quit                                 *
*******************************************
Enter your option (1, 2, 3, 4, 5, 6, 7, or 8): 8

  Having Fun ...
calling ~Cylinder()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Cylinder()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Box()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Box()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Circle()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Rectangle()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Point()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
calling ~Fraction()
*/

/* COMMENTS ON Code/Output
inittially tried to use a shape Array but could not get it to work
*/